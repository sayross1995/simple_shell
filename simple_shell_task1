#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_INPUT_LENGTH 1024
#define PROMPT "$ "

int main(void)
{
	char input[MAX_INPUT_LENGTH];
	char *token;
	ssize_t nrd;

	while (1) {
		printf(PROMPT);

		// Read input from user
		nrd = read(STDIN_FILENO, input, sizeof(input));

		if (nrd == -1) {
			perror("read");
			exit(EXIT_FAILURE);
		} else if (nrd == 0) {
			// Handle end of file (Ctrl+D)
			printf("\n");
			break;
		}

		// Remove the newline character at the end of the input
		input[nrd - 1] = '\0';

		// Tokenize the input
		token = strtok(input, " "); // Split by space

		if (token != NULL) {
			// Handle built-in command: exit
			if (strcmp(token, "exit") == 0) {
				exit(EXIT_SUCCESS);
			}

			// Fork and execute the command
			pid_t pid = fork();

			if (pid == -1) {
				perror("fork");
			} else if (pid == 0) {
				// Child process
				if (execve(token, &token, NULL) == -1) {
					perror("execve");
					exit(EXIT_FAILURE);
				}
			} else {
				// Parent process
				waitpid(pid, NULL, 0); // Wait for child to finish
			}
		}
	}

	return 0;
}
